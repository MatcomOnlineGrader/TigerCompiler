//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g 2015-03-04 22:02:59

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Text;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  TigerCompiler.Parsing 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class TigerLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ALIAS_TYPE=4;
	public const int AND=5;
	public const int ARRAY=6;
	public const int ARRAY_TYPE=7;
	public const int ASCII=8;
	public const int ASSIGN=9;
	public const int BLOCK_DECLARATIONS=10;
	public const int BREAK=11;
	public const int CALL=12;
	public const int COLON=13;
	public const int COMMA=14;
	public const int DIGIT=15;
	public const int DIV=16;
	public const int DO=17;
	public const int ELSE=18;
	public const int END=19;
	public const int EQ=20;
	public const int EXPRESSIONS_BLOCK=21;
	public const int FIELD_TYPE=22;
	public const int FIELD_VALUE=23;
	public const int FOR=24;
	public const int FUNCTION=25;
	public const int FUNCTIONS_BLOCK=26;
	public const int FUNCTION_DECLARATION=27;
	public const int GETHAN=28;
	public const int GTHAN=29;
	public const int ID=30;
	public const int IF=31;
	public const int IF_THEN=32;
	public const int IF_THEN_ELSE=33;
	public const int IN=34;
	public const int INT=35;
	public const int LCB=36;
	public const int LET=37;
	public const int LETHAN=38;
	public const int LETINEND=39;
	public const int LETTER=40;
	public const int LP=41;
	public const int LSB=42;
	public const int LTHAN=43;
	public const int MINUS=44;
	public const int ML_COMMENTS=45;
	public const int NEGATIVE=46;
	public const int NIL=47;
	public const int NOTEQ=48;
	public const int OF=49;
	public const int OR=50;
	public const int PARAMETERS=51;
	public const int PCHAR=52;
	public const int PERIOD=53;
	public const int PLUS=54;
	public const int PROGRAM=55;
	public const int RCB=56;
	public const int RECORD=57;
	public const int RECORD_TYPE=58;
	public const int RP=59;
	public const int RSB=60;
	public const int SEMI=61;
	public const int STAR=62;
	public const int STRING=63;
	public const int THEN=64;
	public const int TO=65;
	public const int TYPE=66;
	public const int TYPES_BLOCK=67;
	public const int TYPE_DECLARATION=68;
	public const int USCORE=69;
	public const int VAR=70;
	public const int VARIABLES_BLOCK=71;
	public const int VARIABLE_DECLARATION=72;
	public const int WHILE=73;
	public const int WS=74;

	    public override void ReportError(RecognitionException exc)
	    {
	        throw new ParsingException(GetErrorMessage(exc, TokenNames), exc);
	    }


    // delegates
    // delegators

	public TigerLexer()
	{
		OnCreated();
	}

	public TigerLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public TigerLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 1);
		TraceIn("ASSIGN", 1);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:86:9: ( ':=' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:86:11: ':='
			{
			DebugLocation(86, 11);
			Match(":="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 1);
			LeaveRule("ASSIGN", 1);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 2);
		TraceIn("COMMA", 2);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:87:9: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:87:11: ','
			{
			DebugLocation(87, 11);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 2);
			LeaveRule("COMMA", 2);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 3);
		TraceIn("COLON", 3);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:88:10: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:88:12: ':'
			{
			DebugLocation(88, 12);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 3);
			LeaveRule("COLON", 3);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 4);
		TraceIn("SEMI", 4);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:89:8: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:89:10: ';'
			{
			DebugLocation(89, 10);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 4);
			LeaveRule("SEMI", 4);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_LP();
	partial void LeaveRule_LP();

	// $ANTLR start "LP"
	[GrammarRule("LP")]
	private void mLP()
	{
		EnterRule_LP();
		EnterRule("LP", 5);
		TraceIn("LP", 5);
		try
		{
			int _type = LP;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:90:7: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:90:9: '('
			{
			DebugLocation(90, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LP", 5);
			LeaveRule("LP", 5);
			LeaveRule_LP();
		}
	}
	// $ANTLR end "LP"

	partial void EnterRule_RP();
	partial void LeaveRule_RP();

	// $ANTLR start "RP"
	[GrammarRule("RP")]
	private void mRP()
	{
		EnterRule_RP();
		EnterRule("RP", 6);
		TraceIn("RP", 6);
		try
		{
			int _type = RP;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:91:7: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:91:9: ')'
			{
			DebugLocation(91, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RP", 6);
			LeaveRule("RP", 6);
			LeaveRule_RP();
		}
	}
	// $ANTLR end "RP"

	partial void EnterRule_LSB();
	partial void LeaveRule_LSB();

	// $ANTLR start "LSB"
	[GrammarRule("LSB")]
	private void mLSB()
	{
		EnterRule_LSB();
		EnterRule("LSB", 7);
		TraceIn("LSB", 7);
		try
		{
			int _type = LSB;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:92:8: ( '[' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:92:10: '['
			{
			DebugLocation(92, 10);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LSB", 7);
			LeaveRule("LSB", 7);
			LeaveRule_LSB();
		}
	}
	// $ANTLR end "LSB"

	partial void EnterRule_RSB();
	partial void LeaveRule_RSB();

	// $ANTLR start "RSB"
	[GrammarRule("RSB")]
	private void mRSB()
	{
		EnterRule_RSB();
		EnterRule("RSB", 8);
		TraceIn("RSB", 8);
		try
		{
			int _type = RSB;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:93:8: ( ']' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:93:10: ']'
			{
			DebugLocation(93, 10);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RSB", 8);
			LeaveRule("RSB", 8);
			LeaveRule_RSB();
		}
	}
	// $ANTLR end "RSB"

	partial void EnterRule_LCB();
	partial void LeaveRule_LCB();

	// $ANTLR start "LCB"
	[GrammarRule("LCB")]
	private void mLCB()
	{
		EnterRule_LCB();
		EnterRule("LCB", 9);
		TraceIn("LCB", 9);
		try
		{
			int _type = LCB;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:94:8: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:94:10: '{'
			{
			DebugLocation(94, 10);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LCB", 9);
			LeaveRule("LCB", 9);
			LeaveRule_LCB();
		}
	}
	// $ANTLR end "LCB"

	partial void EnterRule_RCB();
	partial void LeaveRule_RCB();

	// $ANTLR start "RCB"
	[GrammarRule("RCB")]
	private void mRCB()
	{
		EnterRule_RCB();
		EnterRule("RCB", 10);
		TraceIn("RCB", 10);
		try
		{
			int _type = RCB;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:95:8: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:95:10: '}'
			{
			DebugLocation(95, 10);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RCB", 10);
			LeaveRule("RCB", 10);
			LeaveRule_RCB();
		}
	}
	// $ANTLR end "RCB"

	partial void EnterRule_PERIOD();
	partial void LeaveRule_PERIOD();

	// $ANTLR start "PERIOD"
	[GrammarRule("PERIOD")]
	private void mPERIOD()
	{
		EnterRule_PERIOD();
		EnterRule("PERIOD", 11);
		TraceIn("PERIOD", 11);
		try
		{
			int _type = PERIOD;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:96:9: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:96:11: '.'
			{
			DebugLocation(96, 11);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PERIOD", 11);
			LeaveRule("PERIOD", 11);
			LeaveRule_PERIOD();
		}
	}
	// $ANTLR end "PERIOD"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 12);
		TraceIn("PLUS", 12);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:97:8: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:97:10: '+'
			{
			DebugLocation(97, 10);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 12);
			LeaveRule("PLUS", 12);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 13);
		TraceIn("MINUS", 13);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:98:9: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:98:11: '-'
			{
			DebugLocation(98, 11);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 13);
			LeaveRule("MINUS", 13);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_STAR();
	partial void LeaveRule_STAR();

	// $ANTLR start "STAR"
	[GrammarRule("STAR")]
	private void mSTAR()
	{
		EnterRule_STAR();
		EnterRule("STAR", 14);
		TraceIn("STAR", 14);
		try
		{
			int _type = STAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:99:8: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:99:10: '*'
			{
			DebugLocation(99, 10);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STAR", 14);
			LeaveRule("STAR", 14);
			LeaveRule_STAR();
		}
	}
	// $ANTLR end "STAR"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 15);
		TraceIn("DIV", 15);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:100:10: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:100:12: '/'
			{
			DebugLocation(100, 12);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 15);
			LeaveRule("DIV", 15);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 16);
		TraceIn("EQ", 16);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:101:7: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:101:9: '='
			{
			DebugLocation(101, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 16);
			LeaveRule("EQ", 16);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_NOTEQ();
	partial void LeaveRule_NOTEQ();

	// $ANTLR start "NOTEQ"
	[GrammarRule("NOTEQ")]
	private void mNOTEQ()
	{
		EnterRule_NOTEQ();
		EnterRule("NOTEQ", 17);
		TraceIn("NOTEQ", 17);
		try
		{
			int _type = NOTEQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:102:9: ( '<>' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:102:11: '<>'
			{
			DebugLocation(102, 11);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOTEQ", 17);
			LeaveRule("NOTEQ", 17);
			LeaveRule_NOTEQ();
		}
	}
	// $ANTLR end "NOTEQ"

	partial void EnterRule_LETHAN();
	partial void LeaveRule_LETHAN();

	// $ANTLR start "LETHAN"
	[GrammarRule("LETHAN")]
	private void mLETHAN()
	{
		EnterRule_LETHAN();
		EnterRule("LETHAN", 18);
		TraceIn("LETHAN", 18);
		try
		{
			int _type = LETHAN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:103:9: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:103:11: '<='
			{
			DebugLocation(103, 11);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LETHAN", 18);
			LeaveRule("LETHAN", 18);
			LeaveRule_LETHAN();
		}
	}
	// $ANTLR end "LETHAN"

	partial void EnterRule_GETHAN();
	partial void LeaveRule_GETHAN();

	// $ANTLR start "GETHAN"
	[GrammarRule("GETHAN")]
	private void mGETHAN()
	{
		EnterRule_GETHAN();
		EnterRule("GETHAN", 19);
		TraceIn("GETHAN", 19);
		try
		{
			int _type = GETHAN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:104:9: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:104:11: '>='
			{
			DebugLocation(104, 11);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GETHAN", 19);
			LeaveRule("GETHAN", 19);
			LeaveRule_GETHAN();
		}
	}
	// $ANTLR end "GETHAN"

	partial void EnterRule_LTHAN();
	partial void LeaveRule_LTHAN();

	// $ANTLR start "LTHAN"
	[GrammarRule("LTHAN")]
	private void mLTHAN()
	{
		EnterRule_LTHAN();
		EnterRule("LTHAN", 20);
		TraceIn("LTHAN", 20);
		try
		{
			int _type = LTHAN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:105:9: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:105:11: '<'
			{
			DebugLocation(105, 11);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LTHAN", 20);
			LeaveRule("LTHAN", 20);
			LeaveRule_LTHAN();
		}
	}
	// $ANTLR end "LTHAN"

	partial void EnterRule_GTHAN();
	partial void LeaveRule_GTHAN();

	// $ANTLR start "GTHAN"
	[GrammarRule("GTHAN")]
	private void mGTHAN()
	{
		EnterRule_GTHAN();
		EnterRule("GTHAN", 21);
		TraceIn("GTHAN", 21);
		try
		{
			int _type = GTHAN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:106:9: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:106:11: '>'
			{
			DebugLocation(106, 11);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GTHAN", 21);
			LeaveRule("GTHAN", 21);
			LeaveRule_GTHAN();
		}
	}
	// $ANTLR end "GTHAN"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 22);
		TraceIn("AND", 22);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:107:8: ( '&' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:107:10: '&'
			{
			DebugLocation(107, 10);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 22);
			LeaveRule("AND", 22);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 23);
		TraceIn("OR", 23);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:108:7: ( '|' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:108:9: '|'
			{
			DebugLocation(108, 9);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 23);
			LeaveRule("OR", 23);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_USCORE();
	partial void LeaveRule_USCORE();

	// $ANTLR start "USCORE"
	[GrammarRule("USCORE")]
	private void mUSCORE()
	{
		EnterRule_USCORE();
		EnterRule("USCORE", 24);
		TraceIn("USCORE", 24);
		try
		{
			int _type = USCORE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:109:10: ( '_' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:109:12: '_'
			{
			DebugLocation(109, 12);
			Match('_'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("USCORE", 24);
			LeaveRule("USCORE", 24);
			LeaveRule_USCORE();
		}
	}
	// $ANTLR end "USCORE"

	partial void EnterRule_FUNCTION();
	partial void LeaveRule_FUNCTION();

	// $ANTLR start "FUNCTION"
	[GrammarRule("FUNCTION")]
	private void mFUNCTION()
	{
		EnterRule_FUNCTION();
		EnterRule("FUNCTION", 25);
		TraceIn("FUNCTION", 25);
		try
		{
			int _type = FUNCTION;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:112:10: ( 'function' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:112:12: 'function'
			{
			DebugLocation(112, 12);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION", 25);
			LeaveRule("FUNCTION", 25);
			LeaveRule_FUNCTION();
		}
	}
	// $ANTLR end "FUNCTION"

	partial void EnterRule_ARRAY();
	partial void LeaveRule_ARRAY();

	// $ANTLR start "ARRAY"
	[GrammarRule("ARRAY")]
	private void mARRAY()
	{
		EnterRule_ARRAY();
		EnterRule("ARRAY", 26);
		TraceIn("ARRAY", 26);
		try
		{
			int _type = ARRAY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:113:9: ( 'array' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:113:11: 'array'
			{
			DebugLocation(113, 11);
			Match("array"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ARRAY", 26);
			LeaveRule("ARRAY", 26);
			LeaveRule_ARRAY();
		}
	}
	// $ANTLR end "ARRAY"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 27);
		TraceIn("WHILE", 27);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:114:9: ( 'while' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:114:11: 'while'
			{
			DebugLocation(114, 11);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 27);
			LeaveRule("WHILE", 27);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_BREAK();
	partial void LeaveRule_BREAK();

	// $ANTLR start "BREAK"
	[GrammarRule("BREAK")]
	private void mBREAK()
	{
		EnterRule_BREAK();
		EnterRule("BREAK", 28);
		TraceIn("BREAK", 28);
		try
		{
			int _type = BREAK;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:115:11: ( 'break' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:115:13: 'break'
			{
			DebugLocation(115, 13);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BREAK", 28);
			LeaveRule("BREAK", 28);
			LeaveRule_BREAK();
		}
	}
	// $ANTLR end "BREAK"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 29);
		TraceIn("TYPE", 29);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:116:8: ( 'type' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:116:10: 'type'
			{
			DebugLocation(116, 10);
			Match("type"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 29);
			LeaveRule("TYPE", 29);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 30);
		TraceIn("ELSE", 30);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:117:9: ( 'else' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:117:11: 'else'
			{
			DebugLocation(117, 11);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 30);
			LeaveRule("ELSE", 30);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 31);
		TraceIn("THEN", 31);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:118:8: ( 'then' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:118:10: 'then'
			{
			DebugLocation(118, 10);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 31);
			LeaveRule("THEN", 31);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_NIL();
	partial void LeaveRule_NIL();

	// $ANTLR start "NIL"
	[GrammarRule("NIL")]
	private void mNIL()
	{
		EnterRule_NIL();
		EnterRule("NIL", 32);
		TraceIn("NIL", 32);
		try
		{
			int _type = NIL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:119:8: ( 'nil' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:119:10: 'nil'
			{
			DebugLocation(119, 10);
			Match("nil"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NIL", 32);
			LeaveRule("NIL", 32);
			LeaveRule_NIL();
		}
	}
	// $ANTLR end "NIL"

	partial void EnterRule_FOR();
	partial void LeaveRule_FOR();

	// $ANTLR start "FOR"
	[GrammarRule("FOR")]
	private void mFOR()
	{
		EnterRule_FOR();
		EnterRule("FOR", 33);
		TraceIn("FOR", 33);
		try
		{
			int _type = FOR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:120:8: ( 'for' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:120:10: 'for'
			{
			DebugLocation(120, 10);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FOR", 33);
			LeaveRule("FOR", 33);
			LeaveRule_FOR();
		}
	}
	// $ANTLR end "FOR"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 34);
		TraceIn("LET", 34);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:121:8: ( 'let' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:121:10: 'let'
			{
			DebugLocation(121, 10);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 34);
			LeaveRule("LET", 34);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 35);
		TraceIn("END", 35);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:122:11: ( 'end' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:122:13: 'end'
			{
			DebugLocation(122, 13);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 35);
			LeaveRule("END", 35);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_VAR();
	partial void LeaveRule_VAR();

	// $ANTLR start "VAR"
	[GrammarRule("VAR")]
	private void mVAR()
	{
		EnterRule_VAR();
		EnterRule("VAR", 36);
		TraceIn("VAR", 36);
		try
		{
			int _type = VAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:123:8: ( 'var' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:123:10: 'var'
			{
			DebugLocation(123, 10);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VAR", 36);
			LeaveRule("VAR", 36);
			LeaveRule_VAR();
		}
	}
	// $ANTLR end "VAR"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 37);
		TraceIn("IF", 37);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:124:7: ( 'if' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:124:9: 'if'
			{
			DebugLocation(124, 9);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 37);
			LeaveRule("IF", 37);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_DO();
	partial void LeaveRule_DO();

	// $ANTLR start "DO"
	[GrammarRule("DO")]
	private void mDO()
	{
		EnterRule_DO();
		EnterRule("DO", 38);
		TraceIn("DO", 38);
		try
		{
			int _type = DO;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:125:7: ( 'do' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:125:9: 'do'
			{
			DebugLocation(125, 9);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DO", 38);
			LeaveRule("DO", 38);
			LeaveRule_DO();
		}
	}
	// $ANTLR end "DO"

	partial void EnterRule_TO();
	partial void LeaveRule_TO();

	// $ANTLR start "TO"
	[GrammarRule("TO")]
	private void mTO()
	{
		EnterRule_TO();
		EnterRule("TO", 39);
		TraceIn("TO", 39);
		try
		{
			int _type = TO;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:126:7: ( 'to' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:126:9: 'to'
			{
			DebugLocation(126, 9);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TO", 39);
			LeaveRule("TO", 39);
			LeaveRule_TO();
		}
	}
	// $ANTLR end "TO"

	partial void EnterRule_OF();
	partial void LeaveRule_OF();

	// $ANTLR start "OF"
	[GrammarRule("OF")]
	private void mOF()
	{
		EnterRule_OF();
		EnterRule("OF", 40);
		TraceIn("OF", 40);
		try
		{
			int _type = OF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:127:7: ( 'of' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:127:9: 'of'
			{
			DebugLocation(127, 9);
			Match("of"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OF", 40);
			LeaveRule("OF", 40);
			LeaveRule_OF();
		}
	}
	// $ANTLR end "OF"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 41);
		TraceIn("IN", 41);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:128:7: ( 'in' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:128:9: 'in'
			{
			DebugLocation(128, 9);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 41);
			LeaveRule("IN", 41);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 42);
		TraceIn("LETTER", 42);
		try
		{
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:130:18: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:
			{
			DebugLocation(130, 18);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 42);
			LeaveRule("LETTER", 42);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 43);
		TraceIn("DIGIT", 43);
		try
		{
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:132:17: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:
			{
			DebugLocation(132, 17);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 43);
			LeaveRule("DIGIT", 43);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 44);
		TraceIn("INT", 44);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:134:12: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:134:14: ( DIGIT )+
			{
			DebugLocation(134, 14);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:134:14: ( DIGIT )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:
					{
					DebugLocation(134, 14);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 44);
			LeaveRule("INT", 44);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 45);
		TraceIn("ID", 45);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:136:11: ( LETTER ( LETTER | DIGIT | USCORE )* )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:136:13: LETTER ( LETTER | DIGIT | USCORE )*
			{
			DebugLocation(136, 13);
			mLETTER(); 
			DebugLocation(136, 20);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:136:20: ( LETTER | DIGIT | USCORE )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')||(LA2_0>='A' && LA2_0<='Z')||LA2_0=='_'||(LA2_0>='a' && LA2_0<='z')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:
					{
					DebugLocation(136, 20);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 45);
			LeaveRule("ID", 45);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_PCHAR();
	partial void LeaveRule_PCHAR();

	// $ANTLR start "PCHAR"
	[GrammarRule("PCHAR")]
	private void mPCHAR()
	{
		EnterRule_PCHAR();
		EnterRule("PCHAR", 46);
		TraceIn("PCHAR", 46);
		try
		{
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:140:2: ( ' ' | '!' | '#' .. '[' | ']' .. '~' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:
			{
			DebugLocation(140, 2);
			if ((input.LA(1)>=' ' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='~'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("PCHAR", 46);
			LeaveRule("PCHAR", 46);
			LeaveRule_PCHAR();
		}
	}
	// $ANTLR end "PCHAR"

	partial void EnterRule_ASCII();
	partial void LeaveRule_ASCII();

	// $ANTLR start "ASCII"
	[GrammarRule("ASCII")]
	private void mASCII()
	{
		EnterRule_ASCII();
		EnterRule("ASCII", 47);
		TraceIn("ASCII", 47);
		try
		{
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:143:2: ( ( '0' DIGIT DIGIT | ( '1' ( '0' .. '1' DIGIT | '2' ( '0' .. '7' ) ) ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:143:4: ( '0' DIGIT DIGIT | ( '1' ( '0' .. '1' DIGIT | '2' ( '0' .. '7' ) ) ) )
			{
			DebugLocation(143, 4);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:143:4: ( '0' DIGIT DIGIT | ( '1' ( '0' .. '1' DIGIT | '2' ( '0' .. '7' ) ) ) )
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0=='0'))
			{
				alt4 = 1;
			}
			else if ((LA4_0=='1'))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:143:5: '0' DIGIT DIGIT
				{
				DebugLocation(143, 5);
				Match('0'); 
				DebugLocation(143, 9);
				mDIGIT(); 
				DebugLocation(143, 15);
				mDIGIT(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:143:23: ( '1' ( '0' .. '1' DIGIT | '2' ( '0' .. '7' ) ) )
				{
				DebugLocation(143, 23);
				// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:143:23: ( '1' ( '0' .. '1' DIGIT | '2' ( '0' .. '7' ) ) )
				DebugEnterAlt(1);
				// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:143:24: '1' ( '0' .. '1' DIGIT | '2' ( '0' .. '7' ) )
				{
				DebugLocation(143, 24);
				Match('1'); 
				DebugLocation(143, 28);
				// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:143:28: ( '0' .. '1' DIGIT | '2' ( '0' .. '7' ) )
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='1')))
				{
					alt3 = 1;
				}
				else if ((LA3_0=='2'))
				{
					alt3 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:143:29: '0' .. '1' DIGIT
					{
					DebugLocation(143, 29);
					MatchRange('0','1'); 
					DebugLocation(143, 38);
					mDIGIT(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:143:46: '2' ( '0' .. '7' )
					{
					DebugLocation(143, 46);
					Match('2'); 
					DebugLocation(143, 50);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(3); }


				}


				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

		}
		finally
		{
			TraceOut("ASCII", 47);
			LeaveRule("ASCII", 47);
			LeaveRule_ASCII();
		}
	}
	// $ANTLR end "ASCII"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 48);
		TraceIn("STRING", 48);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			CommonToken x = default(CommonToken);

			 StringBuilder SB = new StringBuilder(); 
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:148:2: ( '\"' ( '\\\\' ( 'n' | 'r' | 't' | '\"' | '\\\\' |x= ASCII | ( ' ' | '\\t' | '\\r' | '\\n' )+ '\\\\' ) |x= PCHAR )* '\"' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:149:2: '\"' ( '\\\\' ( 'n' | 'r' | 't' | '\"' | '\\\\' |x= ASCII | ( ' ' | '\\t' | '\\r' | '\\n' )+ '\\\\' ) |x= PCHAR )* '\"'
			{
			DebugLocation(149, 2);
			Match('\"'); 
			DebugLocation(150, 2);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:150:2: ( '\\\\' ( 'n' | 'r' | 't' | '\"' | '\\\\' |x= ASCII | ( ' ' | '\\t' | '\\r' | '\\n' )+ '\\\\' ) |x= PCHAR )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=3;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0=='\\'))
				{
					alt7 = 1;
				}
				else if (((LA7_0>=' ' && LA7_0<='!')||(LA7_0>='#' && LA7_0<='[')||(LA7_0>=']' && LA7_0<='~')))
				{
					alt7 = 2;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:151:3: '\\\\' ( 'n' | 'r' | 't' | '\"' | '\\\\' |x= ASCII | ( ' ' | '\\t' | '\\r' | '\\n' )+ '\\\\' )
					{
					DebugLocation(151, 3);
					Match('\\'); 
					DebugLocation(151, 8);
					// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:151:8: ( 'n' | 'r' | 't' | '\"' | '\\\\' |x= ASCII | ( ' ' | '\\t' | '\\r' | '\\n' )+ '\\\\' )
					int alt6=7;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, false);
					switch (input.LA(1))
					{
					case 'n':
						{
						alt6 = 1;
						}
						break;
					case 'r':
						{
						alt6 = 2;
						}
						break;
					case 't':
						{
						alt6 = 3;
						}
						break;
					case '\"':
						{
						alt6 = 4;
						}
						break;
					case '\\':
						{
						alt6 = 5;
						}
						break;
					case '0':
					case '1':
						{
						alt6 = 6;
						}
						break;
					case '\t':
					case '\n':
					case '\r':
					case ' ':
						{
						alt6 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:152:7: 'n'
						{
						DebugLocation(152, 7);
						Match('n'); 
						DebugLocation(152, 12);
						 SB.Append("\n"); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:153:7: 'r'
						{
						DebugLocation(153, 7);
						Match('r'); 
						DebugLocation(153, 12);
						 SB.Append("\r"); 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:154:7: 't'
						{
						DebugLocation(154, 7);
						Match('t'); 
						DebugLocation(154, 12);
						 SB.Append("\t"); 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:155:7: '\"'
						{
						DebugLocation(155, 7);
						Match('\"'); 
						DebugLocation(155, 12);
						 SB.Append("\""); 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:156:7: '\\\\'
						{
						DebugLocation(156, 7);
						Match('\\'); 
						DebugLocation(156, 12);
						 SB.Append("\\"); 

						}
						break;
					case 6:
						DebugEnterAlt(6);
						// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:157:7: x= ASCII
						{
						DebugLocation(157, 9);
						int xStart691 = CharIndex;
						int xStartLine691 = Line;
						int xStartCharPos691 = CharPositionInLine;
						mASCII(); 
						x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart691, CharIndex-1);
						x.Line = xStartLine691;
						x.CharPositionInLine = xStartCharPos691;
						DebugLocation(157, 18);
						 SB.Append((char)(int.Parse(x.Text))); 

						}
						break;
					case 7:
						DebugEnterAlt(7);
						// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:158:7: ( ' ' | '\\t' | '\\r' | '\\n' )+ '\\\\'
						{
						DebugLocation(158, 7);
						// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:158:7: ( ' ' | '\\t' | '\\r' | '\\n' )+
						int cnt5=0;
						try { DebugEnterSubRule(5);
						while (true)
						{
							int alt5=2;
							try { DebugEnterDecision(5, false);
							int LA5_0 = input.LA(1);

							if (((LA5_0>='\t' && LA5_0<='\n')||LA5_0=='\r'||LA5_0==' '))
							{
								alt5 = 1;
							}


							} finally { DebugExitDecision(5); }
							switch (alt5)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:
								{
								DebugLocation(158, 7);
								input.Consume();


								}
								break;

							default:
								if (cnt5 >= 1)
									goto loop5;

								EarlyExitException eee5 = new EarlyExitException( 5, input );
								DebugRecognitionException(eee5);
								throw eee5;
							}
							cnt5++;
						}
						loop5:
							;

						} finally { DebugExitSubRule(5); }

						DebugLocation(158, 35);
						Match('\\'); 

						}
						break;

					}
					} finally { DebugExitSubRule(6); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:161:3: x= PCHAR
					{
					DebugLocation(161, 5);
					int xStart740 = CharIndex;
					int xStartLine740 = Line;
					int xStartCharPos740 = CharPositionInLine;
					mPCHAR(); 
					x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart740, CharIndex-1);
					x.Line = xStartLine740;
					x.CharPositionInLine = xStartCharPos740;
					DebugLocation(161, 13);
					 SB.Append(x.Text); 

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(163, 2);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
			 Text = SB.ToString(); 
		}
		finally
		{
			TraceOut("STRING", 48);
			LeaveRule("STRING", 48);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_ML_COMMENTS();
	partial void LeaveRule_ML_COMMENTS();

	// $ANTLR start "ML_COMMENTS"
	[GrammarRule("ML_COMMENTS")]
	private void mML_COMMENTS()
	{
		EnterRule_ML_COMMENTS();
		EnterRule("ML_COMMENTS", 49);
		TraceIn("ML_COMMENTS", 49);
		try
		{
			int _type = ML_COMMENTS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:166:16: ( '/*' ( options {greedy=false; } : ML_COMMENTS | . )* '*/' )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:166:18: '/*' ( options {greedy=false; } : ML_COMMENTS | . )* '*/'
			{
			DebugLocation(166, 18);
			Match("/*"); 

			DebugLocation(166, 23);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:166:23: ( options {greedy=false; } : ML_COMMENTS | . )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=3;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0=='*'))
				{
					int LA8_1 = input.LA(2);

					if ((LA8_1=='/'))
					{
						alt8 = 3;
					}
					else if (((LA8_1>='\u0000' && LA8_1<='.')||(LA8_1>='0' && LA8_1<='\uFFFF')))
					{
						alt8 = 2;
					}


				}
				else if ((LA8_0=='/'))
				{
					int LA8_2 = input.LA(2);

					if ((LA8_2=='*'))
					{
						alt8 = 1;
					}
					else if (((LA8_2>='\u0000' && LA8_2<=')')||(LA8_2>='+' && LA8_2<='\uFFFF')))
					{
						alt8 = 2;
					}


				}
				else if (((LA8_0>='\u0000' && LA8_0<=')')||(LA8_0>='+' && LA8_0<='.')||(LA8_0>='0' && LA8_0<='\uFFFF')))
				{
					alt8 = 2;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:166:54: ML_COMMENTS
					{
					DebugLocation(166, 54);
					mML_COMMENTS(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:166:68: .
					{
					DebugLocation(166, 68);
					MatchAny(); 

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(166, 73);
			Match("*/"); 

			DebugLocation(166, 78);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ML_COMMENTS", 49);
			LeaveRule("ML_COMMENTS", 49);
			LeaveRule_ML_COMMENTS();
		}
	}
	// $ANTLR end "ML_COMMENTS"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 50);
		TraceIn("WS", 50);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:169:11: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:169:13: ( ' ' | '\\t' | '\\r' | '\\n' )+
			{
			DebugLocation(169, 13);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:169:13: ( ' ' | '\\t' | '\\r' | '\\n' )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if (((LA9_0>='\t' && LA9_0<='\n')||LA9_0=='\r'||LA9_0==' '))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:
					{
					DebugLocation(169, 13);
					input.Consume();


					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(169, 41);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 50);
			LeaveRule("WS", 50);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:8: ( ASSIGN | COMMA | COLON | SEMI | LP | RP | LSB | RSB | LCB | RCB | PERIOD | PLUS | MINUS | STAR | DIV | EQ | NOTEQ | LETHAN | GETHAN | LTHAN | GTHAN | AND | OR | USCORE | FUNCTION | ARRAY | WHILE | BREAK | TYPE | ELSE | THEN | NIL | FOR | LET | END | VAR | IF | DO | TO | OF | IN | INT | ID | STRING | ML_COMMENTS | WS )
		int alt10=46;
		try { DebugEnterDecision(10, false);
		try
		{
			alt10 = dfa10.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(10); }
		switch (alt10)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:10: ASSIGN
			{
			DebugLocation(1, 10);
			mASSIGN(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:17: COMMA
			{
			DebugLocation(1, 17);
			mCOMMA(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:23: COLON
			{
			DebugLocation(1, 23);
			mCOLON(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:29: SEMI
			{
			DebugLocation(1, 29);
			mSEMI(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:34: LP
			{
			DebugLocation(1, 34);
			mLP(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:37: RP
			{
			DebugLocation(1, 37);
			mRP(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:40: LSB
			{
			DebugLocation(1, 40);
			mLSB(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:44: RSB
			{
			DebugLocation(1, 44);
			mRSB(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:48: LCB
			{
			DebugLocation(1, 48);
			mLCB(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:52: RCB
			{
			DebugLocation(1, 52);
			mRCB(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:56: PERIOD
			{
			DebugLocation(1, 56);
			mPERIOD(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:63: PLUS
			{
			DebugLocation(1, 63);
			mPLUS(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:68: MINUS
			{
			DebugLocation(1, 68);
			mMINUS(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:74: STAR
			{
			DebugLocation(1, 74);
			mSTAR(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:79: DIV
			{
			DebugLocation(1, 79);
			mDIV(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:83: EQ
			{
			DebugLocation(1, 83);
			mEQ(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:86: NOTEQ
			{
			DebugLocation(1, 86);
			mNOTEQ(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:92: LETHAN
			{
			DebugLocation(1, 92);
			mLETHAN(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:99: GETHAN
			{
			DebugLocation(1, 99);
			mGETHAN(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:106: LTHAN
			{
			DebugLocation(1, 106);
			mLTHAN(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:112: GTHAN
			{
			DebugLocation(1, 112);
			mGTHAN(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:118: AND
			{
			DebugLocation(1, 118);
			mAND(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:122: OR
			{
			DebugLocation(1, 122);
			mOR(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:125: USCORE
			{
			DebugLocation(1, 125);
			mUSCORE(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:132: FUNCTION
			{
			DebugLocation(1, 132);
			mFUNCTION(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:141: ARRAY
			{
			DebugLocation(1, 141);
			mARRAY(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:147: WHILE
			{
			DebugLocation(1, 147);
			mWHILE(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:153: BREAK
			{
			DebugLocation(1, 153);
			mBREAK(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:159: TYPE
			{
			DebugLocation(1, 159);
			mTYPE(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:164: ELSE
			{
			DebugLocation(1, 164);
			mELSE(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:169: THEN
			{
			DebugLocation(1, 169);
			mTHEN(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:174: NIL
			{
			DebugLocation(1, 174);
			mNIL(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:178: FOR
			{
			DebugLocation(1, 178);
			mFOR(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:182: LET
			{
			DebugLocation(1, 182);
			mLET(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:186: END
			{
			DebugLocation(1, 186);
			mEND(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:190: VAR
			{
			DebugLocation(1, 190);
			mVAR(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:194: IF
			{
			DebugLocation(1, 194);
			mIF(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:197: DO
			{
			DebugLocation(1, 197);
			mDO(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:200: TO
			{
			DebugLocation(1, 200);
			mTO(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:203: OF
			{
			DebugLocation(1, 203);
			mOF(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:206: IN
			{
			DebugLocation(1, 206);
			mIN(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:209: INT
			{
			DebugLocation(1, 209);
			mINT(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:213: ID
			{
			DebugLocation(1, 213);
			mID(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:216: STRING
			{
			DebugLocation(1, 216);
			mSTRING(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:223: ML_COMMENTS
			{
			DebugLocation(1, 223);
			mML_COMMENTS(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// C:\\Users\\leandro\\Desktop\\ANTLR Software\\TigerCompiler\\TigerCompiler\\Parsing\\Tiger.g:1:235: WS
			{
			DebugLocation(1, 235);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA10 dfa10;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa10 = new DFA10(this);
	}

	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x1\xFFFF\x1\x26\xC\xFFFF\x1\x28\x1\xFFFF\x1\x2B\x1\x2D\x3\xFFFF\xC\x22"+
			"\xD\xFFFF\x7\x22\x1\x46\x5\x22\x1\x4C\x1\x4D\x1\x4E\x1\x4F\x1\x22\x1"+
			"\x51\x5\x22\x1\xFFFF\x1\x22\x1\x58\x1\x59\x1\x5A\x1\x5B\x4\xFFFF\x1\x22"+
			"\x1\xFFFF\x3\x22\x1\x60\x1\x61\x1\x62\x4\xFFFF\x1\x22\x1\x64\x1\x65\x1"+
			"\x66\x3\xFFFF\x1\x22\x3\xFFFF\x1\x22\x1\x69\x1\xFFFF";
		private const string DFA10_eofS =
			"\x6A\xFFFF";
		private const string DFA10_minS =
			"\x1\x9\x1\x3D\xC\xFFFF\x1\x2A\x1\xFFFF\x2\x3D\x3\xFFFF\x1\x6F\x1\x72"+
			"\x1\x68\x1\x72\x1\x68\x1\x6C\x1\x69\x1\x65\x1\x61\x1\x66\x1\x6F\x1\x66"+
			"\xD\xFFFF\x1\x6E\x2\x72\x1\x69\x1\x65\x1\x70\x1\x65\x1\x30\x1\x73\x1"+
			"\x64\x1\x6C\x1\x74\x1\x72\x4\x30\x1\x63\x1\x30\x1\x61\x1\x6C\x1\x61\x1"+
			"\x65\x1\x6E\x1\xFFFF\x1\x65\x4\x30\x4\xFFFF\x1\x74\x1\xFFFF\x1\x79\x1"+
			"\x65\x1\x6B\x3\x30\x4\xFFFF\x1\x69\x3\x30\x3\xFFFF\x1\x6F\x3\xFFFF\x1"+
			"\x6E\x1\x30\x1\xFFFF";
		private const string DFA10_maxS =
			"\x1\x7D\x1\x3D\xC\xFFFF\x1\x2A\x1\xFFFF\x1\x3E\x1\x3D\x3\xFFFF\x1\x75"+
			"\x1\x72\x1\x68\x1\x72\x1\x79\x1\x6E\x1\x69\x1\x65\x1\x61\x1\x6E\x1\x6F"+
			"\x1\x66\xD\xFFFF\x1\x6E\x2\x72\x1\x69\x1\x65\x1\x70\x1\x65\x1\x7A\x1"+
			"\x73\x1\x64\x1\x6C\x1\x74\x1\x72\x4\x7A\x1\x63\x1\x7A\x1\x61\x1\x6C\x1"+
			"\x61\x1\x65\x1\x6E\x1\xFFFF\x1\x65\x4\x7A\x4\xFFFF\x1\x74\x1\xFFFF\x1"+
			"\x79\x1\x65\x1\x6B\x3\x7A\x4\xFFFF\x1\x69\x3\x7A\x3\xFFFF\x1\x6F\x3\xFFFF"+
			"\x1\x6E\x1\x7A\x1\xFFFF";
		private const string DFA10_acceptS =
			"\x2\xFFFF\x1\x2\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC"+
			"\x1\xD\x1\xE\x1\xFFFF\x1\x10\x2\xFFFF\x1\x16\x1\x17\x1\x18\xC\xFFFF\x1"+
			"\x2A\x1\x2B\x1\x2C\x1\x2E\x1\x1\x1\x3\x1\x2D\x1\xF\x1\x11\x1\x12\x1\x14"+
			"\x1\x13\x1\x15\x18\xFFFF\x1\x27\x5\xFFFF\x1\x25\x1\x29\x1\x26\x1\x28"+
			"\x1\xFFFF\x1\x21\x6\xFFFF\x1\x23\x1\x20\x1\x22\x1\x24\x4\xFFFF\x1\x1D"+
			"\x1\x1F\x1\x1E\x1\xFFFF\x1\x1A\x1\x1B\x1\x1C\x2\xFFFF\x1\x19";
		private const string DFA10_specialS =
			"\x6A\xFFFF}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x2\x24\x2\xFFFF\x1\x24\x12\xFFFF\x1\x24\x1\xFFFF\x1\x23\x3\xFFFF\x1"+
				"\x12\x1\xFFFF\x1\x4\x1\x5\x1\xD\x1\xB\x1\x2\x1\xC\x1\xA\x1\xE\xA\x21"+
				"\x1\x1\x1\x3\x1\x10\x1\xF\x1\x11\x2\xFFFF\x1A\x22\x1\x6\x1\xFFFF\x1"+
				"\x7\x1\xFFFF\x1\x14\x1\xFFFF\x1\x16\x1\x18\x1\x22\x1\x1F\x1\x1A\x1\x15"+
				"\x2\x22\x1\x1E\x2\x22\x1\x1C\x1\x22\x1\x1B\x1\x20\x4\x22\x1\x19\x1\x22"+
				"\x1\x1D\x1\x17\x3\x22\x1\x8\x1\x13\x1\x9",
				"\x1\x25",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x27",
				"",
				"\x1\x2A\x1\x29",
				"\x1\x2C",
				"",
				"",
				"",
				"\x1\x2F\x5\xFFFF\x1\x2E",
				"\x1\x30",
				"\x1\x31",
				"\x1\x32",
				"\x1\x34\x6\xFFFF\x1\x35\x9\xFFFF\x1\x33",
				"\x1\x36\x1\xFFFF\x1\x37",
				"\x1\x38",
				"\x1\x39",
				"\x1\x3A",
				"\x1\x3B\x7\xFFFF\x1\x3C",
				"\x1\x3D",
				"\x1\x3E",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3F",
				"\x1\x40",
				"\x1\x41",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44",
				"\x1\x45",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\x1\x47",
				"\x1\x48",
				"\x1\x49",
				"\x1\x4A",
				"\x1\x4B",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\x1\x50",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\x1\x52",
				"\x1\x53",
				"\x1\x54",
				"\x1\x55",
				"\x1\x56",
				"",
				"\x1\x57",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"",
				"",
				"",
				"",
				"\x1\x5C",
				"",
				"\x1\x5D",
				"\x1\x5E",
				"\x1\x5F",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"",
				"",
				"",
				"",
				"\x1\x63",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				"",
				"",
				"",
				"\x1\x67",
				"",
				"",
				"",
				"\x1\x68",
				"\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1\xFFFF\x1A\x22",
				""
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( ASSIGN | COMMA | COLON | SEMI | LP | RP | LSB | RSB | LCB | RCB | PERIOD | PLUS | MINUS | STAR | DIV | EQ | NOTEQ | LETHAN | GETHAN | LTHAN | GTHAN | AND | OR | USCORE | FUNCTION | ARRAY | WHILE | BREAK | TYPE | ELSE | THEN | NIL | FOR | LET | END | VAR | IF | DO | TO | OF | IN | INT | ID | STRING | ML_COMMENTS | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  TigerCompiler.Parsing 
